// Generated by gencpp from file r2000_commander/follow.msg
// DO NOT EDIT!


#ifndef R2000_COMMANDER_MESSAGE_FOLLOW_H
#define R2000_COMMANDER_MESSAGE_FOLLOW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace r2000_commander
{
template <class ContainerAllocator>
struct follow_
{
  typedef follow_<ContainerAllocator> Type;

  follow_()
    : follow_x(0.0)
    , follow_y(0.0)
    , rotation(0.0)  {
    }
  follow_(const ContainerAllocator& _alloc)
    : follow_x(0.0)
    , follow_y(0.0)
    , rotation(0.0)  {
  (void)_alloc;
    }



   typedef float _follow_x_type;
  _follow_x_type follow_x;

   typedef float _follow_y_type;
  _follow_y_type follow_y;

   typedef float _rotation_type;
  _rotation_type rotation;





  typedef boost::shared_ptr< ::r2000_commander::follow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2000_commander::follow_<ContainerAllocator> const> ConstPtr;

}; // struct follow_

typedef ::r2000_commander::follow_<std::allocator<void> > follow;

typedef boost::shared_ptr< ::r2000_commander::follow > followPtr;
typedef boost::shared_ptr< ::r2000_commander::follow const> followConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2000_commander::follow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2000_commander::follow_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r2000_commander::follow_<ContainerAllocator1> & lhs, const ::r2000_commander::follow_<ContainerAllocator2> & rhs)
{
  return lhs.follow_x == rhs.follow_x &&
    lhs.follow_y == rhs.follow_y &&
    lhs.rotation == rhs.rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r2000_commander::follow_<ContainerAllocator1> & lhs, const ::r2000_commander::follow_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r2000_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::r2000_commander::follow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2000_commander::follow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2000_commander::follow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2000_commander::follow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2000_commander::follow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2000_commander::follow_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2000_commander::follow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f19ced7bb25afdc86477774c9b980548";
  }

  static const char* value(const ::r2000_commander::follow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf19ced7bb25afdc8ULL;
  static const uint64_t static_value2 = 0x6477774c9b980548ULL;
};

template<class ContainerAllocator>
struct DataType< ::r2000_commander::follow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2000_commander/follow";
  }

  static const char* value(const ::r2000_commander::follow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2000_commander::follow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 follow_x\n"
"float32 follow_y\n"
"float32 rotation\n"
;
  }

  static const char* value(const ::r2000_commander::follow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2000_commander::follow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.follow_x);
      stream.next(m.follow_y);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct follow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2000_commander::follow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2000_commander::follow_<ContainerAllocator>& v)
  {
    s << indent << "follow_x: ";
    Printer<float>::stream(s, indent + "  ", v.follow_x);
    s << indent << "follow_y: ";
    Printer<float>::stream(s, indent + "  ", v.follow_y);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2000_COMMANDER_MESSAGE_FOLLOW_H
